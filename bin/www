#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tic-tac-toe4:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.Server(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
* Socket IO events
* */

var io = require('socket.io')(server);

//var chosenWeapon;

var gameInfo = require('../middleware/gameInfo');

io.sockets.on('connection', function(socket){

    socket.on('fillCell', function(data) {
        io.emit('fillCell', data);
    });

    socket.on('chooseWeapon', function (data) {

        socket.chosenWeapon = data;

        if (!gameInfo['gameStarted']) {

            // check if this weapon has been chosen

            for(var prop in gameInfo) {
                if(gameInfo.hasOwnProperty(prop)) {
                    if(gameInfo[prop] === socket.username) {
                        gameInfo[prop] = '';
                    }
                }
            }

            // assign player to chosen weapon

            gameInfo[socket.chosenWeapon + 'Player'] = socket.username;

            if (gameInfo['crossPlayer'] && gameInfo['circlePlayer']) {
                gameInfo['gameStarted'] = true;
                io.emit('startGame', gameInfo);
            }

        }

        var responseObj = {
            user: socket.username,
            weapon: socket.chosenWeapon
        };

        //io.emit('chooseWeapon', responseObj);
        socket.broadcast.emit('chooseWeapon', responseObj);

    });

    socket.on('restartGame', function () {
        io.emit('restartGame');
        gameInfo['gameStarted'] = false;
        gameInfo['crossPlayer'] = '';
        gameInfo['circlePlayer'] = '';
        //chosenWeapon = null;
    });

    /*socket.on('isWeaponSelected', function () {
        *//*if (chosenWeapon) {
            socket.emit('chooseWeapon', chosenWeapon);
        }*//*
    });*/

    console.log('user arrived', socket.id);

    io.emit('whoIsOnline', gameInfo['usersOnline']);

    if (gameInfo['gameStarted'] === true) {
        io.emit('restoreGameStatus', gameInfo);
    }

    socket.on('saveUsername', function (data) {
        if (data) {
            socket.username = data;
            var nameExists = gameInfo['usersOnline'].filter(function (value) {
                return value === socket.username
            });
            if (!nameExists.length) {

                gameInfo['usersOnline'].push(socket.username);
                io.emit('whoIsOnline', gameInfo['usersOnline']);

                if (gameInfo['gameStarted'] === true) {
                    io.emit('restoreGameStatus', gameInfo);

                    if (socket.username === gameInfo['crossPlayer']) {
                        io.to(socket.id).emit("youArePlayer!", 'cross');
                    } else if (socket.username === gameInfo['circlePlayer']) {
                        io.to(socket.id).emit("youArePlayer!", 'circle');
                    }

                }
            }
        }
    });

    socket.on('disconnect', function () {
        var socketUsername = socket.username;
        if (socketUsername) {
            gameInfo['usersOnline'].splice(gameInfo['usersOnline'].indexOf(socketUsername), 1);
            socket.username = null;
        }

        io.emit('whoIsOnline', gameInfo['usersOnline']);
        if (gameInfo['gameStarted'] === true) {
            io.emit('restoreGameStatus', gameInfo);
            //console.log(gameInfo);
        }
    });

    socket.on('logout', function () {
        if (socket.username) {
            gameInfo['usersOnline'].splice(gameInfo['usersOnline'].indexOf(socket.username), 1);
            socket.username = null;
        }
        io.emit('whoIsOnline', gameInfo['usersOnline']);
        if (gameInfo['gameStarted'] === true) {
            socket.emit('restoreGameStatus', gameInfo);
        }
    });


});

